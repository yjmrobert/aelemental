@typeparam T
@namespace AElemental.Components
@inject IJSRuntime JSRuntime

<li class="tree-view-item">
    <div class="tree-view-item-content">

        @if (hasChildren)
        {
            <div class="caret" @onclick="() => ToggleCollapsed.InvokeAsync(Root)">
                <AeIcon Icon="@(IsCollapsed(Root) ? "arrow-right-s" : "arrow-down-s")"></AeIcon>
            </div>
        }
        @if (!isGeneric)
        {
            @if (isIcon)
            {
                <div class="tree-view-icon">
                    <AeIcon Icon="@nodeIcon"></AeIcon>
                </div>
            }
            @if (isSelectable)
            {
                <AeCheckbox Checked="@_isItemChecked" CheckedChanged="@CheckChanged" Indeterminate="_isIndeterminate"/>
            }
            <div class="tree-view-node-text @(NodeIsClickable(Root) ? "clickable" : "") @(IsBold(Root) ? "bold" : "")" @onclick="() => NodeClicked.InvokeAsync(Root)">
                @nodeString
            </div>
        }
        else
        {
            @RenderItem(Root)
        }
    </div>
</li>
@if (hasChildren)
{
    <ul class="nested @(IsCollapsed(Root) ? "" : "active")">
        @foreach (var child in children)
        {
            <TreeItem FetchChildren="FetchChildren" RenderNode="RenderNode" RenderIcon="RenderIcon" Root="child"
                      IsCollapsed="IsCollapsed" ToggleCollapsed="ToggleCollapsed" ItemChecked="ItemChecked" IsChecked="IsChecked"
                      NodeClicked="NodeClicked" RenderItem="RenderItem" IsBold="IsBold" NodeIsClickable="NodeIsClickable"/>
        }
    </ul>
}


@code {

    [Parameter]
    public Func<T, IEnumerable<T>> FetchChildren { get; set; }

    [Parameter]
    public Func<T, string> RenderNode { get; set; }

    [Parameter]
    public Func<T, string> RenderIcon { get; set; }

    [Parameter]
    public T Root { get; set; }

    [Parameter]
    public Func<T, bool> IsCollapsed { get; set; }

    [Parameter]
    public EventCallback<T> ToggleCollapsed { get; set; }

    [Parameter]
    public EventCallback<(T, bool)> ItemChecked { get; set; }

    [Parameter]
    public Func<T, bool> IsChecked { get; set; }

    [Parameter]
    public Func<T, bool> IsIndeterminate { get; set; }

    [Parameter]
    public Func<T, bool> IsBold { get; set; }

    [Parameter]
    public EventCallback<T> NodeClicked { get; set; }

    [Parameter]
    public Func<T, RenderFragment> RenderItem { get; set; }

    [Parameter]
    public Func<T, bool> NodeIsClickable { get; set; }

    IEnumerable<T> children;

    string nodeString;
    string nodeIcon;
    string checkboxId;

    bool isSelectable;
    bool isIcon;
    bool hasChildren;
    bool isGeneric;

    private bool _isItemChecked;
    private bool _isIndeterminate;

    protected override void OnInitialized()
    {
        checkboxId = "checkbox-" + GetHashCode();
        if (ItemChecked.HasDelegate)
        {
            isSelectable = true;
        }
        SetupPrivateProperties();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SetupPrivateProperties();
        StateHasChanged();
    }

    private void SetupPrivateProperties()
    {
        if (RenderNode != null)
            nodeString = RenderNode(Root);
        if (RenderIcon != null)
        {
            nodeIcon = RenderIcon(Root);
            isIcon = true;
        }

        children = FetchChildren(Root);
        hasChildren = children != null && children.Any();
        isGeneric = RenderItem != null;
        if (IsChecked is not null)
        {
            _isItemChecked = IsChecked(Root);
        }
        if (IsIndeterminate is not null)
        {
            _isIndeterminate = IsIndeterminate(Root);
        }
    }

    private async Task CheckChanged(bool value)
    {
        await ItemChecked.InvokeAsync((Root,value));
    }

}