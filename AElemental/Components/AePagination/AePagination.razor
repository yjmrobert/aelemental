@namespace AElemental.Components
@inherits HtmlElement

@if (Pageable != null)
{
    <div class="@_className" attributes="InputAttributesWithoutClass">
        <div tabindex="0" class="@_pageLeftClass" @onclick="() => PageClicked(Pageable.Page - 1)">
            @if (LeftIcon is null)
            {
                <AeIcon Icon="arrow-left-s"/>
            }
            else
            {
                <span class="ae pagination-sider left">
                    @LeftIcon
                </span>
            }
        </div>
        <div tabindex="0"
             class="@($"ae page {(0 == Pageable.Page ? "active" : "")}")"
             @onclick="@(async () => PageClicked(0))">
            1
        </div>
        @if (Pageable.PageCount > 1)
        {
            if (Pageable.PageCount > _numberOfButtons + 1)
            {
                @for (var i = 0; i < _numberOfButtons; i++)
                {
                    var localIndex = _middleButton - _numberOfButtonsOnSide + i;
                    var nuzzled = (i == 0 && localIndex > _numberOfButtonsOnSide - 1)
                                  || (i == _numberOfButtons - 1 && localIndex < Pageable.PageCount - _numberOfButtonsOnSide);

                    <div tabindex="0"
                         class="@GetPageClass(localIndex, nuzzled)"
                         @onclick="@(async () => PageClicked(localIndex, nuzzled))">
                        @if (nuzzled)
                        {
                            @if (MoreIcon is null)
                            {
                                <AeIcon Icon="more"/>
                            }
                            else
                            {
                                <span class="ae more icon">
                                    @MoreIcon
                                </span>
                            }
                        }
                        else
                        {
                            @(localIndex + 1)
                        }
                    </div>
                }
            }
            else
            {
                @for (var i = 1; i < Pageable.PageCount - 1; i++)
                {
                    var localIndex = i;
                    <div tabindex="0"
                         class="@($"ae page {(i == Pageable.Page ? "active" : "")}")"
                         @onclick="() => PageClicked(localIndex)">
                        @(i + 1)
                    </div>
                }
            }
            <div tabindex="0"
                 class="@($"ae page {(Pageable.PageCount - 1 == Pageable.Page ? "active" : "")}")"
                 @onclick="@(async () => PageClicked(Pageable.PageCount - 1))">
                @Pageable.PageCount
            </div>
        }
        <div tabindex="0" class="@_pageRightClass" @onclick="@(async () => PageClicked(Pageable.Page + 1))">
            @if (RightIcon is null)
            {
                <AeIcon Icon="arrow-right-s"/>
            }
            else
            {
                <span class="ae pagination-sider right">
                    @RightIcon
                </span>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public IPageableComponent Pageable { get; set; }

    [Parameter]
    public EventCallback<int> OnPageClick { get; set; }

    [Parameter]
    public RenderFragment LeftIcon { get; set; }

    [Parameter]
    public RenderFragment RightIcon { get; set; }

    [Parameter]
    public RenderFragment MoreIcon { get; set; }


    private int _numberOfButtonsOnSide = 2;
    private int _numberOfButtons => _numberOfButtonsOnSide * 2 + 1;

    private int _middleButton => Math.Min(Pageable.PageCount - 1 - (_numberOfButtonsOnSide + 1),
        Math.Max(Pageable.Page, _numberOfButtonsOnSide + 1));

    private int _abbreviateMin => Math.Max(1, Pageable.Page - _numberOfButtonsOnSide);
    private int _abbreviateMax => Math.Min(Pageable.PageCount - 1, Pageable.Page + _numberOfButtonsOnSide);


    private string _className => $"ae pagination {_inputClass}";
    private string _pageLeftClass => $"ae page page-left {(Pageable.Page == 0 ? "disabled" : "")}";
    private string _pageRightClass => $"ae page page-right {(Pageable.Page == Pageable.PageCount - 1 ? "disabled" : "")}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Pageable != null)
        {
            Pageable.Paginator = this;
        }
    }

    private string GetPageClass(int localIndex, bool nuzzled)
    {
        var active = localIndex == Pageable.Page ? "active" : "";
        var disabled = nuzzled ? "disabled" : "";
        return $"ae page {active} {disabled}";
    }

    private async Task PageClicked(int targetIndex, bool nuzzled = false)
    {
        if (nuzzled || targetIndex < 0 || targetIndex >= Pageable.PageCount || targetIndex == Pageable.Page)
        {
            return;
        }

        await OnPageClick.InvokeAsync(targetIndex);
    }

}