@namespace AElemental.Components
@using Microsoft.AspNetCore.Components.Routing
@inherits HtmlElement
@inject GetDimensionsService Service

<div @ref="OuterBounds" class="@_classname" @attributes="InputAttributesWithoutClass">
    <span @ref="WideMenu" class="links">
        @foreach (var link in Links)
        {
            if (link.priority <= target)
            {
                <NavLink class="link" href="@link.href" ActiveClass="active">
                    @link.label
                </NavLink>
            }
        }
        @if (showButton)
        {
            <span class="toggle" @onclick="() => ToggleNav()">
                <i class="fas fa-bars"></i>
            </span>
        }
    </span>
    <span class="dropdown">
        @foreach (var link in Links)
        {
            if (link.priority > target)
            {
                <NavLink class="link" href="@link.href" ActiveClass="active">
                    @link.label
                </NavLink>
            }
        }
    </span>
</div>

@code {

    ElementReference OuterBounds;
    ElementReference WideMenu;

    //variables to store relevant size data
    public int outerWidth { get; set; }
    public int menuWidth { get; set; }
    public Dictionary<int, float> pastWidth = new();
    //target priority, elements with a higher number will hidden under the manburger button
    private int target = 0;
    //should we display the hamburger button?
    private bool showButton = false;

    private bool _isOpen = false;
    private string _classname => $"ae menu {(_isOpen ? "open" : "")}";

    [Parameter]
    public List<(string label, string href, int priority)> Links { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        target = returnTarget();
    }

    //default priority is to display all elements horizontally
    private int returnTarget()
    {
        var temp = 0;
        foreach (var lnk in Links)
        {
            if (lnk.priority > target)
            {
                temp = lnk.priority;
            }
        }
        return temp;
    }

    //check each rneder to make sure all elements fit
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }

        await GetDimensions();
        adjustMenu();
    }

    //use the Service to get dimensions of supplied elements and store them
    async Task GetDimensions()
    {
        var boundDimension = await Service.GetDimensions(OuterBounds);
        var menuDimension = await Service.GetDimensions(WideMenu);

        outerWidth = boundDimension.Width;
        menuWidth = menuDimension.Width;
    }


    private void adjustMenu()
    {
    //if there is an overflow, adjust target priority to display fewer objects
        if (outerWidth < menuWidth)
        {
            try
            {
                pastWidth.Add(target, menuWidth);
            }
            catch
            {
            }
            target -= 1;
            showButton = true;
            StateHasChanged();
        }
    //if not check to see if we could now fit the previous priority again
        else if (pastWidth != null && pastWidth.ContainsKey(target + 1) && pastWidth[target + 1] < outerWidth)
        {
            target += 1;
        }
        showButton = showButtonLogic();
    }

    //should we display the hamburger button? Not if everything is displayed horizontally
    private bool showButtonLogic()
    {
        foreach (var lnk in Links)
        {
            if (lnk.priority > target)
            {
                return true;
            }
        }
        return false;
    }

    private void ToggleNav(bool forceClose = false)
    {
        if (forceClose)
        {
            _isOpen = false;
        }
        else
        {
            _isOpen = !_isOpen;
        }
        StateHasChanged();
    }

}