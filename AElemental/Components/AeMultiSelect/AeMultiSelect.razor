

@namespace AElemental.Components
@inherits HtmlElement
@inject IJSRuntime JSRuntime
@typeparam T

@if (MultiSelect)
{
<AeFlex style="flex-wrap:wrap">
    @foreach(var item in Items)
    {
        <AeFlex style="margin-right: 1em; margin-bottom: 0.3em">
            <AeCheckbox IsChecked="SelectedItems.Contains(item)" IsCheckedChanged="b => ToggleItemSelected(item,b)" />@Renderer(item)
        </AeFlex>
    }
</AeFlex>   
}
else
{
    var idx = Items.IndexOf(SelectedItem);
<div class="ae content-wrapper">
<select @key=SelectedItem @onchange="DropdownChanged">
    @if (DefaultLabel != null)
    {                
        <option @key=@DefaultLabel value="-1" selected="@(idx < 0)">@DefaultLabel</option>
    }
    @for (var il = 0;il < Items.Count;il++)
    {
        var current = il;
        <option @key=Items[current] value=@current selected="@(idx == current)">@Renderer(Items[current])</option>                
    }
</select>
</div>    
}
@code {
    private SortedSet<T> selectedItems = new SortedSet<T>();

    [Parameter]
    public List<T> Items { get; set; }
    [Parameter]
    public string DefaultLabel { get; set; } = null;
    [Parameter]
    public string NullValue { get; set; } = "-";
    [Parameter]
    public T? SelectedItem { get; set; }
    [Parameter]
    public EventCallback<T?> SelectedItemChanged { get; set; }
    [Parameter]
    public SortedSet<T> SelectedItems {
        get
        {
            return selectedItems;
        }
        set
        {
            if (value?.Count > 1 && !MultiSelect)
            {
                selectedItems = new SortedSet<T>(value.Take(1));
            }
            else
            {
                selectedItems = value ?? new SortedSet<T>();
            }
        }}
    [Parameter]
    public EventCallback<SortedSet<T>> SelectedItemsChanged { get; set; }
    [Parameter]
    public bool MultiSelect { get; set; } = false;
    [Parameter]
    public Func<T, string> Renderer { get; set; }

    private string _wrapperClassname => $"ae dropdown-wrapper {_inputClass}";
    private string _id = $"ae-{Guid.NewGuid().ToString()}";

    private RenderFragment _labelFragment;

    private async Task DropdownChanged(ChangeEventArgs args)
    {        
        var currentIdx = Convert.ToInt32(args.Value);
        selectedItems.Clear();
        if (currentIdx >= 0)
        {
            var selectedItem = Items[currentIdx];
            SelectedItem = selectedItem;
            selectedItems.Add(selectedItem);
            await SelectedItemChanged.InvokeAsync(selectedItem);
            await SelectedItemsChanged.InvokeAsync(selectedItems);
        }
        else
        {
            SelectedItem = default(T);
            await SelectedItemChanged.InvokeAsync(default(T));
            await SelectedItemsChanged.InvokeAsync(selectedItems);            
        }
    }

    protected override void OnParametersSet()
    {
        if(Renderer is null)
        {
            Renderer = item => item?.ToString() ?? NullValue;
        }
        if (SelectedItem != null)
        {
            selectedItems.Clear();
            selectedItems.Add(SelectedItem);
        }
    }

    private void ToggleItemSelected(T item, bool isSelected)
    {
        if (isSelected && !selectedItems.Contains(item))
        {
            selectedItems.Add(item);
        }
        if (!isSelected)
        {
            selectedItems.Remove(item);
        }
        SelectedItemsChanged.InvokeAsync(selectedItems);
    }

}