@namespace AElemental.Components

@inherits HtmlElement


<div class="@_Classname">
    @foreach (var page in _Tabs)
    {
        <div @onclick="() => {if (!page.Disable) _ActivePage = page; OnTabSelected.InvokeAsync();}" class="ae tab @(page == _ActivePage ? "active" : "") @(page.Disable ? "disable" : "") @(page.Deletable ? "deletable" : "")">
            @(page.Header)
            @if (page.Deletable)
            {
                <Span class="ae tab-deletable" @onclick:stopPropagation="true" @onclick="() => {if (!page.Disable) page.RemoveTab();}">&#10006</Span>
            }
        </div>
    }
</div>

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public int TabIndex { get; set; } // starts at 0

    private string _Classname => $"ae tab-wrapper {_inputClass}";

    private List<AeTabPage> _Tabs { get; set; } = new();

    internal AeTabPage _ActivePage { get; set; }

    public EventCallback OnTabSelected { get; set; }

    public EventCallback OnTabRemoved { get; set; }

    public void AddTab(AeTabPage tab)
    {
        if (!_Tabs.Any(t => t == tab)) // checks for duplicate tabs / keys
        {
            _Tabs.Add(tab);
            if (_Tabs.Count == 1)
            {
                _ActivePage = tab;
            }
            else if (TabIndex >= 0 && TabIndex < _Tabs.Count)
            {
                if (_Tabs[TabIndex] != _ActivePage)
                {
                    _ActivePage = tab;
                }
            }
            StateHasChanged();
        }
    }

    public void RemoveTab(AeTabPage tab)
    {
        var index = _Tabs.IndexOf(tab);
        if (index != -1)
        {
            _Tabs.Remove(tab);
            _ActivePage = _Tabs.Count == index ? _Tabs[index - 1] : _Tabs[index];
            StateHasChanged();
            OnTabRemoved.InvokeAsync();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (TabIndex >= _Tabs.Count || TabIndex < 0)
        {
            throw new ArgumentOutOfRangeException("Page index was out of range");
        }
    }

    protected override void OnParametersSet()
    {
        if (TabIndex >= 0 && TabIndex < _Tabs.Count)
        {
            if (_Tabs[TabIndex] != _ActivePage)
            {
                _ActivePage = _Tabs[TabIndex];
            }
        }
    }

}