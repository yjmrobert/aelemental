@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms
@typeparam T
@namespace AElemental.Components

<AeFormLabel PropertyInfo="@PropertyInfo" Instance="@Instance"/>
@if (!Editable)
{
    @if (AeModelFormTools.IsNumericType(PropertyInfo.PropertyType))
    {
        <Input disabled="true" Value="@GetFormattedValue()" class="ae input disabled" size="@AeModelFormTools.GetSize(PropertyInfo)" DisplayName="@GetLabel()" style="height:@AeModelFormTools.GetSize(PropertyInfo)px"/>
    }
    else
    {
        <div class="ae input disabled">
            @GetFormattedValue()
        </div>
    }
}
else
{
@if (HasStringLength() is null)
{
    <Microsoft.AspNetCore.Components.Forms.InputTextArea @bind-Value="PropertyValue" class="ae input" placeholder="@localize(AeModelFormTools.GetPlaceHolder(PropertyInfo))" cols="@AeModelFormTools.GetSize(PropertyInfo)" DisplayName="@GetLabel()"/>
}
else
{
    <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="PropertyValue" type="@TextFieldType" class="ae input" placeholder="@localize(AeModelFormTools.GetPlaceHolder(PropertyInfo))" size="@AeModelFormTools.GetSize(PropertyInfo)" DisplayName="@GetLabel()"/>
}
    <div class="errortext">
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(AeModelFormTools.GetExpression<string>(Instance, PropertyInfo))"/>
    </div>
}

@code {

    [Parameter]
    public PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }

    [Parameter]
    public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    [CascadingParameter(Name = "LocalizerFunction")]
    public Func<string, string?> LocalizerFunction { get; set; } = null;

    private string localize(string input)
    {
        return LocalizerFunction is null ? input : LocalizerFunction(input) ?? input;
    }

    private string? TextFieldType => AeModelFormTools.IsPasswordField(PropertyInfo) ? "password" : null;

    protected override async Task OnInitializedAsync()
    {
        valueChangedCallback = EventCallback.Factory.Create<object>(this, s => OnValueChanged(s));
    }

    private EventCallback<object> valueChangedCallback;

    private async Task OnValueChanged(object value)
    {
        var changeArgs = new ModelFormArgsInternal {PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo)};
        await Notifier(changeArgs);
    }

    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {
            var prevValue = PropertyInfo.GetValue(Instance) as string;
            PropertyInfo.SetValue(Instance, value);
            if (value != prevValue)
                valueChangedCallback.InvokeAsync(value);
        }
    }

    public string GetFormattedValue()
    {
        var value = PropertyInfo.GetValue(Instance);

        if (value is null)
            return string.Empty;

        var format = PropertyInfo.GetStringFormat();
        if (format is null)
        {
            return value.ToString();
        }
        if (AeModelFormTools.IsNumericType(PropertyInfo.PropertyType))
        {
            var num = Convert.ToDouble(PropertyInfo.GetValue(Instance));
            return num.ToString(format);
        }
        return value.ToString();
    }

    /// <summary>
    ///     Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private string GetLabel()
    {
        return AeModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private string GetID()
    {
        return PropertyInfo.Name;
    }


    private int? HasStringLength()
    {
        var att = Attribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}