@using System.Reflection
@typeparam T
@namespace AElemental.Components


<AeFormLabel PropertyInfo="@PropertyInfo" Instance="@Instance"/>


<Microsoft.AspNetCore.Components.Forms.InputDate class="ae input" @bind-Value="PropertyValue" DisplayName="GetLabel()"/>

@if (AeModelFormTools.IsNullable(PropertyInfo))
{
    <div class="errortext">
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(AeModelFormTools.GetExpression<DateTime?>(Instance, PropertyInfo))"/>
    </div>
}
else
{
    <div class="errortext">
        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(AeModelFormTools.GetExpression<DateTime>(Instance, PropertyInfo))"/>
    </div>
}


@code {

    [Parameter]
    public PropertyInfo PropertyInfo { get; set; }

    /// <summary>
    ///     There are two major layout options. Standard has line based with label / field and compact has a tabular layout
    ///     with CSS flex.
    /// </summary>
    [Parameter]
    public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter]
    public T Instance { get; set; }

    /// <summary>
    ///     Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private string GetLabel()
    {
        return AeModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    public DateTime? PropertyValue
    {
        get => AeModelFormTools.AsNullableValue<DateTime>(PropertyInfo, Instance);
        set => PropertyInfo.SetValue(Instance, value);
    }

    private string GetID()
    {
        return PropertyInfo.Name;
    }

}