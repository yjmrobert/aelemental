@*
    Copyright 2020 Apption Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*@

@typeparam T
@namespace AElemental.Components

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms
@using System.Reflection
@using AElemental.Components.AePageOutline
@inherits HtmlElement
@inject ILogger<AeModelForm<T>> Logger

@if (Model != null)
{
    @if (EnableOutline)
    {
        <AeCard class="outline-fixed">
            <Header>
                <AeTypography style="flex-grow: 1;">@localize("Form Navigation")</AeTypography>
            </Header>
            <ChildContent>
                <AeOutlineId Anchors="_Anchors"/>
            </ChildContent>
        </AeCard>
    }
    <div class="@_modelFormClass" id=@(EnableOutline ? "Uncategorized" : "")>
        <EditForm Model="Model" OnSubmit="@OnSubmit">
            @if (ModelFormContext.CustomValidation)
            {
                <AeCustomValidationValidator
                    @ref="_customValidationValidator"
                    Model="Model"
                    ModelFormContext="ModelFormContext"/>
            }
            else
            {
                <DataAnnotationsValidator/>
            }

            <div class="ae modelform-rows @_rowsClass">
                @foreach (var category in ModelFormContext.GetCategories())
                {
                    var isCategoryLocked = ModelFormContext.IsCategoryLocked(category.category);

                    <div style="display: flex; flex-direction: row">
                        @if (!string.IsNullOrWhiteSpace(category.category))
                        {
                            var id = "";
                            @if (EnableOutline)
                            {
                                id = category.category;
                                if (!_Anchors.Any(a => a.Id == id))
                                {
                                    _Anchors.Add((id, 
                                        @<AeTypography Variant="a">@id</AeTypography>
                                        ));
                                }
                            }

                            <AeFlex Vertical class="horizontal">
                                <AeTypography Variant="h3" id="@id">
                                    @localize(category.category)
                                    <label class="ae ae-form-control-label notes">
                                        <AeTypography>@ModelFormContext.GetCategoryNote(category.category)</AeTypography>
                                    </label>
                                    @if (IsSectionLocksVisible)
                                    {
                                        <AeFlex>
                                            <AeCheckbox IsChecked="isCategoryLocked" IsCheckedChanged="(async (isCheck) => await onCategoryLock(isCheck, category.category))" CheckedIcon="@CheckedIcon" UncheckedIcon="@UncheckedIcon"/> <AeTypography Variant="p" class="no-margin">@localize("Lock Section") </AeTypography>
                                        </AeFlex>
                                    }
                                </AeTypography>

                            </AeFlex>
                        }
                    </div>
                    @foreach (var props in category.properties)
                    {
                        <div class="ae modelform-row @RowColor">
                            @foreach (var prop in props)
                            {
                                var isBool = GetNonNullableType(prop) == typeof(bool);
                                var colClass = $"ae modelform-col {(isBool ? "checkbox-on-the-left" : "")}";
                                <div class=@colClass>
                                    <CascadingValue Value="@OnChange" Name="OnChangeCallback">
                                        <CascadingValue Value="@LocalizerFunction" Name="LocalizerFunction">
                                            <CascadingValue Value="@ModelFormContext" Name="ModelFormContext">
                                                <CascadingValue Value="@LabelForPropertyFunc" Name="LabelForPropertyFunc">
                                                    <CascadingValue Value="@NotifyArg" Name="Notifier">
                                                        <CascadingValue Value="@LabelsOnTop" Name="LabelsOnTop">
                                                            <CascadingValue Value="@AreFieldsNullable" Name="AreFieldsNullable">
                                                                @if (IsReadOnly || isCategoryLocked)
                                                                {
                                                                    <AePropertyValueDisplay PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                else
                                                                {
                                                                    if (ModelFormContext.IsDropDown(prop))
                                                                    {
                                                                        <AeDropdownPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                    }
                                                                    else
                                                                    {
                                                                        if (GetNonNullableType(prop) == typeof(string))
                                                                        {
                                                                            <AeStringPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" Editable="prop.IsEditable()"/>
                                                                        }
                                                                        if (prop.PropertyType == typeof(int))
                                                                        {
                                                                            <AeNumberPropertyInput T=int PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        if (prop.PropertyType == typeof(long))
                                                                        {
                                                                            <AeNumberPropertyInput T=long PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        if (prop.PropertyType == typeof(float))
                                                                        {
                                                                            <AeNumberPropertyInput T=float PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        if (prop.PropertyType == typeof(double))
                                                                        {
                                                                            <AeNumberPropertyInput T=double PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (prop.PropertyType == typeof(decimal))
                                                                        {
                                                                            <AeNumberPropertyInput T=decimal PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (prop.PropertyType == typeof(int?))
                                                                        {
                                                                            <AeNumberPropertyInput T=int? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (prop.PropertyType == typeof(long?))
                                                                        {
                                                                            <AeNumberPropertyInput T=long? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (prop.PropertyType == typeof(float?))
                                                                        {
                                                                            <AeNumberPropertyInput T=float? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (prop.PropertyType == typeof(double?))
                                                                        {
                                                                            <AeNumberPropertyInput T=double? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (prop.PropertyType == typeof(decimal?))
                                                                        {
                                                                            <AeNumberPropertyInput T=decimal? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (GetNonNullableType(prop) == typeof(bool))
                                                                        {
                                                                            <AeBoolPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                        @if (GetNonNullableType(prop) == typeof(DateTime))
                                                                        {
                                                                            <AeDateTimePropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                        }
                                                                    }
                                                                }
                                                            </CascadingValue>
                                                        </CascadingValue>
                                                    </CascadingValue>
                                                </CascadingValue>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
            <ValidationSummary class="errortext"/>
            <div class="ae flex  ">

                <button id="submit" disabled="@(!IsSubmitEnabled)" class=@_submitButtonClass style="margin-left: 4px; margin-bottom: 8px" type="submit">@localize(SubmitLabel)</button>
                @if (!string.IsNullOrWhiteSpace(CancelLabel) && OnCancel != null)
                {
                    <button id="cancel" class="ae button dark" style="margin-left: 4px; margin-bottom: 8px" @onclick="ReloadForm">@localize(CancelLabel)</button>
                }
            </div>

        </EditForm>
    </div>
}


@code {
    private string _modelFormClass => $"ae modelform {_inputClass}";
    private string _rowsClass => $"{(LabelsOnTop ? "top-label" : "left-label")} {(Flexbox ? "flexbox" : "")}";
    private string _submitButtonClass => IsSubmitEnabled ? "ae button dark" : "ae button disabled";
    private bool isConfigured = false;
    private EditContext _editContext;

    [Parameter]
    public bool IsSubmitEnabled { get; set; } = true;

    [Parameter]
    public bool IsSectionLocksVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (EnableOutline)
        {
            _Anchors = new List<(string Id, RenderFragment ChildContent)>
            {
                (localize("Uncategorized"), 
                    @<AeTypography Variant="a">@localize("Uncategorized Fields")</AeTypography>
                    )
            };
        }

        ModelFormContext.Logger = Logger;
        ModelFormContext.RefreshModel = async () => await InvokeAsync(() => StateHasChanged());
        ModelFormContext.SetProperties(GetProperties());
        if (!isConfigured)
        {
            await OnConfigure.InvokeAsync(ModelFormContext);
            isConfigured = true;
        }
        NotifyArg = OnNotify;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) StateHasChanged();
    }

    [Parameter]
    public Func<string, string?> LocalizerFunction { get; set; } = null;

    private string localize(string input)
    {
        return LocalizerFunction is null ? input : LocalizerFunction(input) ?? input;
    }

    [Parameter]
    public T Model { get; set; }

    [Parameter]
    public string RowColor { get; set; } = "blue";

    /// <summary>
    ///     Text that will be displayed for the Submit button. Will be "Submit" by default
    /// </summary>
    [Parameter]
    public string SubmitLabel { get; set; } = "Submit";

    /// <summary>
    ///     Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public string CancelLabel { get; set; } = null;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    /// <summary>
    ///     Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private Func<ModelFormArgsInternal, Task> NotifyArg;

    private async Task ReloadForm()
    {
        _isCancelled = true;
        Model = await OnCancel();
        StateHasChanged();
    }

    /// <summary>
    ///     A callback that will be invoked when the form is cancelled
    ///     This call is expected to revert all the changes to the Model instance and return a model before modifications
    /// </summary>
    [Parameter]
    public Func<Task<T>> OnCancel { get; set; }

    /// <summary>
    ///     A callback that will be invoked when the form is created
    ///     This call is designed to let the user access the context and configure drop downs and other dynamic items
    /// </summary>
    [Parameter]
    public EventCallback<IModelFormContext> OnConfigure { get; set; }

    /// <summary>
    ///     A callback that will be invoked when the form is submitted and the
    ///     <see cref="EditContext" /> is determined to be valid.
    /// </summary>
    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    /// <summary>
    ///     A callback that will be invoked when the form is submitted and the
    ///     <see cref="EditContext" /> is determined to be invalid.
    /// </summary>
    [Parameter]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    /// <summary>
    ///     There are two major layout options. Standard has line based with label / field and compact has a tabular layout
    ///     with CSS flex.
    /// </summary>
    [Parameter]
    public ModelFormStyle ModelFormStyle { get; set; } = ModelFormStyle.Normal;

    [Parameter]
    public EventCallback<string> OnCategoryLock { get; set; }

    public ModelFormContext<T> ModelFormContext { get; } = new();

    /// <summary>
    ///     This method will be called when a property is changed.
    /// </summary>
    [Parameter]
    public EventCallback<ModelFormChangeArgs> OnChange { get; set; }

    [Parameter]
    public bool LabelsOnTop { get; set; }

    [Parameter]
    public bool AreFieldsNullable { get; set; }

    [Parameter]
    public bool Flexbox { get; set; }

    [Parameter]
    public bool EnableOutline { get; set; }

    [Parameter]
    public string OutlineStyle { get; set; }

    [Parameter]
    public string CheckedIcon { get; set; } = null;

    [Parameter]
    public string UncheckedIcon { get; set; } = null;

    private bool _isCancelled = false;

    private List<(string Id, RenderFragment ChildContent)> _Anchors;

    private List<PropertyInfo> GetProperties()
    {
        return typeof(T).GetAeModelProperties();
    }

    private Type GetNonNullableType(PropertyInfo prop)
    {
        return AeModelFormTools.GetNonNullableType(prop);
    }

    private AeCustomValidationValidator<T>? _customValidationValidator;

    private async Task onCategoryLock(bool isLocked, string category)
    {
        if (!string.IsNullOrEmpty(category))
        {
            ModelFormContext.RegisterCategoryLock(category, isLocked);
            await OnConfigure.InvokeAsync(ModelFormContext);
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    private async Task OnSubmit(EditContext editContext)
    {
        if (_isCancelled)
        {
            isConfigured = false;
            return;
        }

        var isValid = ModelFormContext.CustomValidation
            ? _customValidationValidator!.Validate() : editContext.Validate();

        if (isValid)
        {
            await OnValidSubmit.InvokeAsync(editContext);
        }
        else
        {
            await OnInvalidSubmit.InvokeAsync(editContext);
        }
    }

    public async Task OnNotify(ModelFormArgsInternal iargs)
    {
        var args = new ModelFormChangeArgs {Context = ModelFormContext, PropertyInfo = iargs.PropertyInfo, EditContext = iargs.EditContext};
        await OnChange.InvokeAsync(args);
        await InvokeAsync(() => { StateHasChanged(); });
    }

}