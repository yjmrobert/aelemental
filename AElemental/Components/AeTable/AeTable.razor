@*
    Copyright 2020 Apption Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*@

@namespace AElemental.Components
@inherits AeBaseTable<T>
@inject IJSRuntime JSRuntime
@inject GetDimensionsService DimensionService

@typeparam T

<div class="@_tableClass" @attributes="InputAttributesWithoutClass">
    @if (Headers.Count > 0)
    {
        <AeTableRow Header GridStyle="@_gridStyle">
            @if (SimpleTable)
            {
                <div class="corner  @_simple">&nbsp;</div>
            }
            @foreach (var (header, index) in Headers.Select((h, index) => (h, index)))
            {
                @if (CustomHeader != null)
                {
                    @CustomHeader(header, index)
                }
                else
                {
                    @DefaultHeader(header, index)
                }
            }
        </AeTableRow>
    }
    <div class="ae table-scroll" style="@_scrollStyle" @onscroll="OnScroll" @ref="tableRef">
        <div class="ae table-rows" style="@_rowsStyle">
            @foreach (var row in Rows.Skip(scrollViewResult.SkipItems).Take(scrollViewResult.TakeItems).Select((item, i) => new {item, i}))
            {
                <AeTableRow
                    GridStyle="@_gridStyle"
                    tabindex="0"
                    class="@GetRowColor(row.item)"
                    style="@GetRowStyle(row.i)"
                    @onclick="() => OnRowClick.InvokeAsync(row.item)"
                    @onfocus="() => OnRowFocus.InvokeAsync(row.item)">

                    @if (SimpleTable)
                    {
                        @if (CustomRowLabels != null)
                        {
                            @CustomRowLabels(row.i + 1)
                        }
                        else
                        {
                            <AeTableCell class="row-label">@(row.i + 1)</AeTableCell>
                        }
                    }
                    @foreach (var (accessor, index) in Accessors.Select((a, i) => (a, i)))
                    {
                        if (Renderers?[index] is null)
                        {
                            <span
                                @ref="cells[(row.i, index)]"
                                @onmouseover="async () => await OnHoverShowToolTip(row.i, index, accessor?.Invoke(row.item))">
                                <AeTableCell>
                                    @accessor?.Invoke(row.item)
                                </AeTableCell>
                            </span>
                        }
                        else
                        {
                            <AeTableCell> @Renderers[index](row.item) </AeTableCell>
                        }
                    }
                </AeTableRow>
            }
        </div>
    </div>
</div>
@if (AddToolTip)
{
    <div @ref="toolTipRef" class="ae table-tooltip-wrapper" style="top:@(_toolTipTop)px; left:@(_toolTipLeft)px; width:@(_toolTipWidth)px; height:@(_toolTipHeight)px;">
        <AeTooltip Text="@_toolTipText"/>
    </div>
}

@code {

    [Parameter]
    public Func<T, string> ColorAccessor { get; set; }

    [Parameter]
    public int MaxHeight { get; set; } = 600;

    [Parameter]
    public int RowHeight { get; set; } = 33; //In px

    [Parameter]
    public bool SimpleTable { get; set; } = false;

    [Parameter]
    public Func<int, RenderFragment> CustomRowLabels { get; set; }

    [Parameter]
    public bool AddToolTip { get; set; }

    protected override RenderFragment DefaultHeader(string header, int index)
    {
        return
            @<AeTypography class="table-cell" @onclick="() => ToggleSortOnColumn(index)">
                @header
                <span class="ae table-sort">
                    <i class="@GetSortIconClass(index)"></i>
                </span>
            </AeTypography>;
    }

    public class customArgs
    {
    }

    private string _simple = null;
    private string _rowsStyle => $"{_gridStyle}; grid-template-rows: repeat({scrollViewResult.TakeItems},{RowHeight}px); height:{scrollViewResult.Height}px;";
    private string _rowStyle => $"grid-template-rows:{RowHeight}px;";
    private string _scrollStyle => $"max-height: {MaxHeight}px;";
    private string _toolTipText;
    private int _toolTipHeight;
    private int _toolTipWidth;
    private int _toolTipTop;
    private int _toolTipLeft;

    private ElementReference tableRef;
    private ElementReference toolTipRef;
    private Dictionary<(int, int), ElementReference> cells = new();
    private ScrollView scrollView;
    private ScrollViewResult scrollViewResult;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        scrollView = new ScrollView();
        scrollViewResult = new ScrollViewResult();

        if (SimpleTable)
        {
            _simple = "simple";
            RowHeight = 22;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        var tempHeight = Rows.Count() * RowHeight;
        if (firstRender || scrollViewResult.Height != tempHeight)
        {
            scrollView = await JSRuntime.InvokeAsync<ScrollView>("virtualScrolling.getScrollView", tableRef);

            scrollViewResult.Height = Rows.Count() * RowHeight;
            scrollViewResult.SkipItems = scrollView.ScrollTop / RowHeight;
            scrollViewResult.TakeItems = (int) Math.Ceiling((scrollView.ScrollTop + MaxHeight) / (double) RowHeight) - scrollViewResult.SkipItems;
            StateHasChanged();
        }
        if (firstRender && AddToolTip)
        {
            await JSRuntime.InvokeVoidAsync("initializeToolTip", toolTipRef, DotNetObjectReference.Create(this));
        }
    }

    private string GetRowColor(T row)
    {
        return ColorAccessor?.Invoke(row) + _simple;
    }

    private string GetRowStyle(int rowIndex)
    {
        return $"{_rowStyle} top:{(scrollViewResult.SkipItems + rowIndex) * RowHeight}px;";
    }

    private async Task OnHoverShowToolTip(int row, int cell, string text)
    {
        if (AddToolTip)
        {
            var element = cells[(row, cell)];
            var dimension = await DimensionService.GetDimensions(element);
            var position = await DimensionService.GetPosition(element);
            _toolTipHeight = dimension.Height;
            _toolTipWidth = dimension.Width + 4;
            _toolTipTop = position.Top;
            _toolTipLeft = position.Left;
            _toolTipText = text;
            StateHasChanged();
        }
    }

    [JSInvokableAttribute("OnMouseOutHideToolTip")]
    public void OnMouseOutHideToolTip()
    {
        _toolTipText = null;
        _toolTipLeft = 0;
        _toolTipTop = 0;
        _toolTipHeight = 0;
        _toolTipWidth = 0;
        StateHasChanged();
    }

    private async Task OnScroll()
    {
        scrollView = await JSRuntime.InvokeAsync<ScrollView>("virtualScrolling.getScrollView", tableRef);
        scrollViewResult.Height = Rows.Count() * RowHeight;
        scrollViewResult.SkipItems = scrollView.ScrollTop / RowHeight;
        scrollViewResult.TakeItems = (int) Math.Ceiling((scrollView.ScrollTop + scrollView.ClientHeight) / (double) RowHeight) - scrollViewResult.SkipItems;
        StateHasChanged();
    }

    public class ScrollView
    {
        public int ClientHeight { get; set; }

        public int ScrollTop { get; set; }
    }

    public class ScrollViewResult
    {
        public int Height { get; set; }
        public int SkipItems { get; set; }
        public int TakeItems { get; set; }
    }

}