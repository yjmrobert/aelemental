@using System.Threading
@*
    Copyright (c) 2021 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Title: Basic Steps
    Description: Steps using default icons. 
*@
<AeSteps T="int" CurrentStepState="GetState" StepItems="steps" StepTitle="StepTitle" StepMessage="StepMessage"></AeSteps>
@*For demo only*@
<AeButton Disabled="@disbaleRunAgain" OnClickEvent="OnRunAgain">Run Again</AeButton>

@code {
    public List<int> steps = new() {1, 2, 3, 4};

    public Dictionary<int, AeSteps<int>.StepState> stepStates = new()
    {
        {1, AeSteps<int>.StepState.Queued},
        {2, AeSteps<int>.StepState.Queued},
        {3, AeSteps<int>.StepState.Queued},
        {4, AeSteps<int>.StepState.Queued}
    };

    public string StepTitle(int i)
    {
        return "Step Title";
    }

    public string StepMessage(int i)
    {
        switch (stepStates[i])
        {
            case AeSteps<int>.StepState.Passed:
                return "Step has passed.";
            case AeSteps<int>.StepState.Failed:
                return "Step has failed";
            case AeSteps<int>.StepState.Running:
                return "Step is running...";
            default:
                return "Step is queued.";
        }
    }

    public AeSteps<int>.StepState GetState(int i)
    {
        return stepStates[i];
    }

    //demo only
    bool disbaleRunAgain = true;

    bool runAgainRequested = false;

    private void OnRunAgain()
    {
        runAgainRequested = true;
        disbaleRunAgain = true;
        stepStates = new Dictionary<int, AeSteps<int>.StepState>
        {
            {1, AeSteps<int>.StepState.Queued},
            {2, AeSteps<int>.StepState.Queued},
            {3, AeSteps<int>.StepState.Queued},
            {4, AeSteps<int>.StepState.Queued}
        };
        InvokeAsync(() => StateHasChanged());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || runAgainRequested)
        {
            await Task.Run(() => updateTask());
        }
    }

    private async Task updateTask()
    {
        runAgainRequested = false;
        await InvokeAsync(() => StateHasChanged());
        var r = new Random();
        for (var i = 0; i <= stepStates.Count; i++)
        {
            Thread.Sleep(1500);
            if (i != 0)
            {
                if (r.Next(2) == 0)
                    stepStates[i] = AeSteps<int>.StepState.Passed;
                else
                    stepStates[i] = AeSteps<int>.StepState.Failed;
            }
            if (i != stepStates.Count)
                stepStates[i + 1] = AeSteps<int>.StepState.Running;

            await InvokeAsync(() => StateHasChanged());
        }
        disbaleRunAgain = false;
        await InvokeAsync(() => StateHasChanged());
    }

}