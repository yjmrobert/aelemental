@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Title: Simple Table
    Description: Simple looking table element with sorting. Used by setting the SimpleTable attribute to True. Maintains the functionality of the regular table, but with a more data oriented aesthetic. You can override the row labels with your own Render Fragment via CustomRowLabels() in the same way you can overide the headers, only difference being CustomRowLabels() takes only an integer argument representing the row number.
*@

<AeTable Accessors="accessorFunctions"
         Dataset="dummyData"
         SimpleTable="true"/>
<br/>

<AeTable Accessors="accessorFunctions"
         Dataset="dummyData"
         Headers="headers"
         SimpleTable="true"
         CustomRowLabels="@customLabel"/>


@code {

    //Defined Custom Row label Render Fragment
    Func<int, RenderFragment> customLabel = (row) =>
    {
        if (row % 2 == 0)
        {
            return @<img src="https://via.placeholder.com/30x25">;
        }
        else
        {
            return @<div class="ae table-cell row-label">@(row)</div>;
        }
    };

    // Define the headers at the top of the table
    private List<string> headers = new List<string>
    {
        "Type", "Category", "Location", "Importance", "Icon"
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance"}
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new List<Func<DummyData, string>>
    {
        new Func<DummyData, string>(dummyData => { return dummyData.Type; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Category; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Location; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Importance.ToString(); }),
        new Func<DummyData, string>(dummyData => { return dummyData.CategoryIconClass; })
    };

    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

}