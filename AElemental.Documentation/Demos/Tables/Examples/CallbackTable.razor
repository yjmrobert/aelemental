@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Title: Callback Tables
    Description: Basic table element with a provided callback function on row selection. It is cruicial to set "T" to be equal to be equal to the data class. OnRowClick runs the callback only on click, while OnRowFocus will also run when tabbing through the table
*@

<AeTypography>Selected Row Data:</AeTypography>
<AeTypography>@_type, @_category, @_location</AeTypography>
<br/>
<AeTypography Variant="h4">On Click Callback Table</AeTypography>
<AeTable Accessors="accessorFunctions"
         Dataset="dummyData"
         Headers="headers"
         T="DummyData"
         OnRowClick="@testCall"/>
<br/>
<AeTypography Variant="h4">On Focus Callback Table</AeTypography>
<AeTable Accessors="accessorFunctions"
         Dataset="dummyData"
         Headers="headers"
         T="DummyData"
         OnRowFocus="@testCall"/>


@code {

    private string _category;
    private string _location;
    private string _type = "nothing selected yet";

    private void testCall(DummyData data)
    {
        _category = data.Category;
        _location = data.Location;
        _type = data.Type;
        StateHasChanged();
    }

    // Define the headers at the top of the table
    private List<string> headers = new()
    {
        "Type", "Category", "Location"
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new()
    {
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance"}
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new()
    {
        dummyData => { return dummyData.Type; },
        dummyData => { return dummyData.Category; },
        dummyData => { return dummyData.Location; }
    };

    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

}