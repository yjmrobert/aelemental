@page "/component/{Component}"
@page "/typography/{Component}"
@page "/layout/{Component}"

@using AElemental.Documentation.Demos.AeHeading
@using AElemental.Documentation.Demos.AeButton
@using AElemental.Documentation.Demos.AeCheckbox
@using AElemental.Documentation.Demos.AeCode
@inherits DemoPage


@if (_demos.ContainsKey(Component.ToLowerInvariant()))
{
    @foreach (var demo in _demos[Component.ToLowerInvariant()])
    {
        <DemoSection Path="@GetDemoSectionPath(demo)">
            <DynamicComponent Type="demo"/>
        </DemoSection>
    }
}

@code {

    [Parameter]
    public string Component { get; set; }

    private readonly Dictionary<string, List<Type>> _demos = new()
    {
        {
            nameof(AeButton).ToLowerInvariant(),
            new List<Type>
            {
                typeof(AeButtonBasics),
                typeof(AeButtonSizes),
                typeof(AeButtonDisabled),
                typeof(AeButtonNavigation),
                typeof(AeButtonOnClick)
            }
        },
        {
            nameof(AeCheckbox).ToLowerInvariant(),
            new List<Type>
            {
                typeof(AeCheckboxBasics),
                typeof(AeCheckboxIndeterminate),
            }
        },
        {
            nameof(AeCode).ToLowerInvariant(),
            new List<Type>
            {
                typeof(AeCodeBasics),
                typeof(AeCodeSingleLine),
                typeof(AeCodeMultiLine),
            }
        },
        {
            nameof(AeHeading).ToLowerInvariant(),
            new List<Type>
            {
                typeof(AeHeadingBasics),
            }
        },
    };
    
    private string GetDemoSectionPath(Type demo)
    {
        return $"{demo.FullName?.Replace("AElemental.Documentation.", "./")}.razor";
    }

}