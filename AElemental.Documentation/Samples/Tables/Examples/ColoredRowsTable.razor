@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Title: Colored Rows Table
    Description: You can define a function to color the row, more color variations can be added via themeing
*@

<AeTable Accessors="accessorFunctions"
         ColorAccessor="colorFunction"
         Dataset="dummyData"
         Headers="headers"/>


@code {

    // Define the headers at the top of the table
    private List<string> headers = new()
    {
        "Type", "Category", "Location"
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new()
    {
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance"},
        new() {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance"}
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new()
    {
        dummyData => { return dummyData.Type; },
        dummyData => { return dummyData.Category; },
        dummyData => { return dummyData.Location; }
    };

    // [Optional] Can define custom colors per row
    private Func<DummyData, string> colorFunction = dummyData =>
    {
        switch (dummyData.Importance)
        {
            case 3:
                return "red";
            case 2:
                return "yellow";
            case 1:
                return "blue";
            case 0:
            default:
                return "";
        }
    };

    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

}