@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Title: Table Overflow
    Description: The table rows are virtualized and a maximum height can be specified to allow for scrolling
*@

<AeTable Accessors="accessorFunctions"
         Renderers="renderFunctions"
         ColorAccessor="colorFunction"
         Dataset="GetOverflowData()"
         Headers="headers"
         MaxHeight="600"/>


@code {

    private List<DummyData> GetOverflowData()
    {
        var result = new List<DummyData>();

        for (var i = 0; i < 15; i++)
        {
            result.AddRange(dummyData.Select(d => d));
        }
        return result;
    }


    // Define the headers at the top of the table
    private List<string> headers = new List<string>
    {
        "Type", "Category", "Location"
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance"}
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new List<Func<DummyData, string>>
    {
        new Func<DummyData, string>(dummyData => { return dummyData.Type; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Category; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Location; })
    };

    // [Optional] Can define custom rendering for columns, order matters
    private List<Func<DummyData, RenderFragment>> renderFunctions = new List<Func<DummyData, RenderFragment>>
    {
        null,
        new Func<DummyData, RenderFragment>(dummyData =>
        {
            return @<i class="@dummyData.CategoryIconClass"></i>;
        }),
        null
    };

    // [Optional] Can define custom colors per row
    private Func<DummyData, string> colorFunction = dummyData =>
    {
        switch (dummyData.Importance)
        {
            case 3:
                return "red";
            case 2:
                return "yellow";
            case 1:
                return "blue";
            case 0:
            default:
                return "";
        }
    };

    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

}