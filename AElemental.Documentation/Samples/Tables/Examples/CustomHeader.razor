@*
    Copyright (c) 2020 Apption Corporation

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Title: Custom Header
    Description: Table with a supplied function returning a render fragment. This function must take the string header and int index arguments, and return a RenderFragment.
*@

<AeTable Accessors="accessorFunctions"
         Dataset="dummyData"
         Headers="headers"
         CustomHeader="@customHeader"/>


@code {

    //Defined Custom header render fragment
    Func<string, int, RenderFragment> customHeader = (header, index) =>
    {
        if (index == 1)
        {
            return @<img src="https://via.placeholder.com/400x25">;
        }
        else if (index == 2)
        {
            return @<AeButton To="/tables">Go To Top</AeButton>;
        }
        else
        {
            return @<AeTypography class="table-cell">@header</AeTypography>;
        }
    };


    static List<string> _dropdownItems = new List<string>
    {
        "First", "Second", "Third", "Fourth", "Fifth", "Sixth"
    };

    static void HandleDropdownChange(string selectedItem)
    {
    }


    // Define the headers at the top of the table
    private List<string> headers = new List<string>
    {
        "Type", "Category", "Location"
    };

    // Typeparam class to hold row data, can be anything
    private List<DummyData> dummyData = new List<DummyData>
    {
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 0, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Hashtag", CategoryIconClass = "fa fa-hashtag", Importance = 1, Location = "FILESYSTEM", Type = "Number"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 1, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 2, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/COSTS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 0, Location = "SQLDEV_1/PROFITS", Type = "Finance"},
        new DummyData {Category = "Dollar", CategoryIconClass = "fa fa-dollar-sign", Importance = 3, Location = "SQLDEV_1/PROFITS", Type = "Finance"}
    };

    // Accessor functions to retrieve cell value
    private List<Func<DummyData, string>> accessorFunctions = new List<Func<DummyData, string>>
    {
        new Func<DummyData, string>(dummyData => { return dummyData.Type; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Category; }),
        new Func<DummyData, string>(dummyData => { return dummyData.Location; })
    };

    class DummyData
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string CategoryIconClass { get; set; }
        public string Location { get; set; }
        public int Importance { get; set; }
    }

}