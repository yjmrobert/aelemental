@*
  Copyright (c) 2020 Apption Corporation

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Title: Icon Tree View with collapse and bold methods
  Description: A tree view that uses custom collapse methods and highlight methods and sets specific nodes bold.
*@
<div>
    <AeTreeViewIcon T="Item" Roots="_roots" FetchChildren="GetChildren" RenderNode="RenderNode" IsCollapsed="IsCollapsed"
                    ToggleCollapsed="ToggleCollapsed" IsBold="IsBold" RenderIcon="RenderIcon" NodeIsClickable="IsClickable"/>
</div>


@code {
    private List<Item> _roots = new();

    public List<Item> GetChildren(Item root)
    {
        return root.children;
    }

    public string RenderNode(Item item)
    {
        return item.name;
    }

    public string RenderIcon(Item item)
    {
        return item.icon;
    }

    public bool IsCollapsed(Item item)
    {
        return item.isCollapsed;
    }

    public void ToggleCollapsed(Item item)
    {
        item.isCollapsed = !item.isCollapsed;
    }

    public bool IsBold(Item item)
    {
        return item.isBold;
    }

    public bool IsClickable(Item item)
    {
        return item.isClickable;
    }


    protected override void OnInitialized()
    {
        var table1 = new Item(1, "table1", "table", true, null);
        var database1 = new Item(5, "database1", "database-2", false, new List<Item>(new[] {table1}));
        var database3 = new Item(7, "database1", "database-2", true, null);
        var server1 = new Item(9, "server1", "server", false, new List<Item>(new[] {database1}));
        var server2 = new Item(10, "server2", "server", false, new List<Item>(new[] {database3}));
        table1.parent = database1;
        database1.parent = server1;
        database3.parent = server2;
        table1.isBold = true;
        database3.isBold = true;
        table1.isClickable = true;
        database3.isClickable = true;
        _roots.AddRange(new[] {server1, server2});
    }

    public class Item
    {
        public Item(int id, string name, string icon, bool isCollapsed, List<Item> children)
        {
            this.id = id;
            this.name = name;
            this.icon = icon;
            this.isCollapsed = isCollapsed;
            this.children = children;
        }

        public int id { get; set; }
        public string name { get; set; }
        public string icon { get; set; }
        public bool isCollapsed { get; set; }
        public List<Item> children { get; set; }
        public Item parent { get; set; }
        public bool isBold { get; set; }
        public bool isClickable { get; set; }

        public override bool Equals(object obj)
        {
            return id.Equals((obj as Item)?.id);
        }
    }

}