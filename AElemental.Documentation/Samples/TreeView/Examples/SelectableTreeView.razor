@using System.Text.Json
@using System.Text.Json.Serialization
@*
  Copyright (c) 2020 Apption Corporation

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.

  Title: Selectable Tree View
  Description: A tree view that replaces icons with checkboxes with three states
*@
<AeTreeViewSelectable
    T="PlaceholderItem"
    Roots="_roots"
    FetchChildren="GetChildren"
    RenderNode="RenderNode"
    IsChecked="IsChecked"
    IsIndeterminate="IsIndeterminate"
    ItemChecked="ItemChecked"/>


<div>
    <div>Json Item:</div>
    @JsonSerializer.Serialize(_roots, new JsonSerializerOptions
    {
        ReferenceHandler = ReferenceHandler.IgnoreCycles,
        WriteIndented = true
    });
</div>

@code {
    private List<PlaceholderItem> _roots = new();

    private List<PlaceholderItem> GetChildren(PlaceholderItem root)
    {
        return root.Children;
    }

    private bool IsChecked(PlaceholderItem item)
    {
        return item.IsChecked;
    }

    private bool IsIndeterminate(PlaceholderItem item)
    {
        return item.IsIndeterminate;
    }

    private string RenderNode(PlaceholderItem placeholderItem)
    {
        return placeholderItem.Name;
    }

    private void ItemChecked((PlaceholderItem placeholderItem, bool isChecked) tuple)
    {
        tuple.placeholderItem.IsChecked = tuple.isChecked;
        tuple.placeholderItem.IsIndeterminate = false;
        UpdateChildren(tuple.placeholderItem);
        UpdateParents(tuple.placeholderItem);
    }

    private void UpdateChildren(PlaceholderItem placeholderItem)
    {
        if (placeholderItem.Children == null)
            return;

        foreach (var item in placeholderItem.Children)
        {
            item.IsChecked = placeholderItem.IsChecked;
            UpdateChildren(item);
        }
    }

    private void UpdateParents(PlaceholderItem placeholderItem)
    {
        var parent = placeholderItem?.Parent;
        if (parent == null)
            return;

    // TODO: Optimize this check
        parent.IsChecked = AllChildrenChecked(parent);
        parent.IsIndeterminate = !parent.IsChecked && parent.Children.Any(x => x.IsChecked);

        UpdateParents(parent);
    }

    private bool AllChildrenChecked(PlaceholderItem placeholderItem)
    {
        return placeholderItem.Children?.All(AllChildrenChecked) ?? placeholderItem.IsChecked;
    }

    protected override void OnInitialized()
    {
        var table1 = new PlaceholderItem(1, "table1", "table", false, null);
        var table2 = new PlaceholderItem(2, "table2", "table", false, null);
        var table3 = new PlaceholderItem(3, "table3", "table", false, null);
        var table4 = new PlaceholderItem(4, "table4", "table", false, null);
        var database1 = new PlaceholderItem(5, "database1", "database-2", false, new List<PlaceholderItem>(new[] {table1}));
        var database2 = new PlaceholderItem(6, "database2", "database-2", false, new List<PlaceholderItem>(new[] {table2}));
        var database3 = new PlaceholderItem(7, "database3", "database-2", false, new List<PlaceholderItem>(new[] {table3}));
        var database4 = new PlaceholderItem(8, "database4", "database-2", false, new List<PlaceholderItem>(new[] {table4}));
        var server1 = new PlaceholderItem(9, "server1", "server", false, new List<PlaceholderItem>(new[] {database1, database2}));
        var server2 = new PlaceholderItem(10, "server2", "server", false, new List<PlaceholderItem>(new[] {database3, database4}));
        table1.Parent = database1;
        table2.Parent = database2;
        table3.Parent = database3;
        table4.Parent = database4;
        database1.Parent = server1;
        database2.Parent = server1;
        database3.Parent = server2;
        database4.Parent = server2;
        _roots.AddRange(new[] {server1, server2});
    }

    public class PlaceholderItem
    {
        public PlaceholderItem(int id, string name, string icon, bool isChecked, List<PlaceholderItem> children)
        {
            Id = id;
            Name = name;
            Icon = icon;
            IsChecked = isChecked;
            Children = children;
        }

        private int Id { get; set; }
        public string Name { get; set; }
        public string Icon { get; set; }
        public bool IsChecked { get; set; }
        public bool IsIndeterminate { get; set; }
        public List<PlaceholderItem> Children { get; set; }
        public PlaceholderItem Parent { get; set; }

        public override bool Equals(object obj)
        {
            return Id.Equals((obj as PlaceholderItem)?.Id);
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Id, Name, Icon, IsChecked, Children, Parent);
        }
    }

}