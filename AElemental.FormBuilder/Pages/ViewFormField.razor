@page "/formfields/view/{id}"
@using AElemental.FormBuilder.Code
@inject IFormFieldRepository Repo
@inject NavigationManager NavManager

@if (_formField == null)
{
    <h3>Please Wait</h3>
}
else
{
    <h3>@_formField.Section - @_formField.Field</h3>

    @if (_mode == ViewMode.View)
    {
        <table>
            <thead>
            <tr>
                <th>Property</th>
                <th>Value</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>Section</td>
                <td>@_formField.Section</td>
            </tr>
            <tr>
                <td>Field</td>
                <td>@_formField.Field</td>
            </tr>
            <tr>
                <td>Extension</td>
                <td>@_formField.ExtensionLabel</td>
            </tr>
            <tr>
                <td>MaxLength</td>
                <td>@_formField.MaxLength</td>
            </tr>
            <tr>
                <td>Mandatory</td>
                <td>@_formField.Mandatory</td>
            </tr>
            <tr>
                <td>Dropdown option count</td>
                <td>@_formField.DropdownOptionCount</td>
            </tr>
            <tr>
                <td>Formatted</td>
                <td>@_formField.Formatted</td>
            </tr>
            <tr>
                <td>Code</td>
                <td>@_formField.Code</td>
            </tr>
            <tr>
                <td>SQL Name</td>
                <td>@_formField.SQLName</td>
            </tr>
            <tr>
                <td>JSON</td>
                <td>
                    <pre><code>@_formField.JSON</code></pre>
                </td>
            </tr>
            <tr>
                <td>C# Code</td>
                <td>
                    <pre><code>@_formField.CSCode</code></pre>
                </td>
            </tr>
            </tbody>
        </table>

        <AeButton OnClickEvent="@GoToEditMode" class="blue">Edit</AeButton>
    }
    else if (_mode == ViewMode.Edit)
    {
        <AeModelForm
            Model="@_formField"
            SubmitLabel="Save Changes"
            OnValidSubmit="@HandleValidSubmit"
            CancelLabel="Cancel"
            OnCancel="@HandleCancel"/>
    }
}


<AeButton To="/formfields">Back</AeButton>


@code {

    private enum ViewMode
    {
        View,
        Edit
    }

    private ViewMode _mode = ViewMode.View;

    [Parameter]
    public string Id { get; set; }

    private FormField _formField;
    private FormField _originalFormField;

    private void ChangeViewMode(ViewMode mode)
    {
        _mode = mode;
        InvokeAsync(() => StateHasChanged());
    }

    private async void GoToEditMode()
    {
        await Task.Run(() => ChangeViewMode(ViewMode.Edit));
    }

    private async void GoToViewMode()
    {
        await Task.Run(() => ChangeViewMode(ViewMode.View));
    }

    private async Task<FormField> LoadFormField()
    {
        var formField = await Repo.GetFormField(int.Parse(Id));
        _originalFormField = formField.Clone();
        return formField;
    }

    private async Task<FormField> HandleCancel()
    {
        _formField.TakeValuesFrom(_originalFormField); //workaround to prevent cancelled changes from being saved
        GoToViewMode();
        return await LoadFormField();
    }

    protected override async Task OnInitializedAsync()
    {
        _formField = await LoadFormField();
    }

    private async void HandleValidSubmit()
    {
        _formField = await Repo.UpdateFormField(_formField);
        GoToViewMode();
    }

}